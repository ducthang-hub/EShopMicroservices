FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 6006
EXPOSE 6056

# Copy SSL certificate
WORKDIR /https
COPY server.pfx /https/server.pfx

# Install CA certificates for trusting SSL certificates
COPY server.crt /usr/local/share/ca-certificates/server.crt
RUN apt-get update && apt-get install -y ca-certificates && update-ca-certificates

# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
RUN dotnet dev-certs https --trust
WORKDIR /src
COPY ["Authentication.Server/Authentication.Server.csproj", "Authentication.Server/"]
COPY ["BuildingBlocks/BuildingBlocks/BuildingBlocks.csproj", "BuildingBlocks/BuildingBlocks/"]
COPY ["BuildingBlocks/BuildingBlocks.Messaging/BuildingBlocks.Messaging.csproj", "BuildingBlocks/BuildingBlocks.Messaging/"]
# restore the Authentication.Server.csproj in docker file system 
RUN dotnet restore "Authentication.Server/Authentication.Server.csproj"
RUN dotnet restore "BuildingBlocks/BuildingBlocks/BuildingBlocks.csproj"
RUN dotnet restore "BuildingBlocks/BuildingBlocks.Messaging/BuildingBlocks.Messaging.csproj"
# copy every files in the current context (not the files generated by dotnet restore) to . (the WORKDIR)  
COPY . .
WORKDIR "/src/Authentication.Server"
RUN dotnet build "Authentication.Server.csproj" -c Release -o /app/build

# Publish stage
FROM build AS publish
WORKDIR "/src/Authentication.Server"
RUN dotnet publish "Authentication.Server.csproj" -c Release -o /app/publish  /p:UseAppHost=false

# Final stage
FROM base AS final
WORKDIR /app
COPY --from=build /root/.dotnet/corefx/cryptography/x509stores/my/* /root/.dotnet/corefx/cryptography/x509stores/my/
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Authentication.Server.dll"]