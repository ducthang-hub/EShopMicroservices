// <auto-generated />
using System;
using Authentication.Server.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authentication.Server.Persistence.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250112072447_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("authen")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authentication.Server.Domains.ApiResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Secret")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ApiResource", "authen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b9aaeb4-d86c-4b2b-91ff-6df237697b77"),
                            Name = "customer-api-resource",
                            Secret = new Guid("efd456ce-d33b-49f7-bb18-9019338fa79a")
                        },
                        new
                        {
                            Id = new Guid("5ed18100-4476-4fd4-ac74-4218e939e3fe"),
                            Name = "shop-owner-api-resource",
                            Secret = new Guid("9c232a28-07ae-4405-96e0-94e57ffb13b0")
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.ApiScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiScope", "authen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75f824ab-b599-4519-8bcc-37bea9ad7cd9"),
                            DisplayName = "Student Api Scope",
                            Name = "customer-scope"
                        },
                        new
                        {
                            Id = new Guid("7b3b5167-24a4-41e0-8648-48f7f02dd44b"),
                            DisplayName = "Teacher Api Scope",
                            Name = "shop-owner-scope"
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.ApiScopeResource", b =>
                {
                    b.Property<Guid>("ApiScopeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uuid");

                    b.HasKey("ApiScopeId", "ApiResourceId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiScopeResource", "authen");

                    b.HasData(
                        new
                        {
                            ApiScopeId = new Guid("75f824ab-b599-4519-8bcc-37bea9ad7cd9"),
                            ApiResourceId = new Guid("5b9aaeb4-d86c-4b2b-91ff-6df237697b77")
                        },
                        new
                        {
                            ApiScopeId = new Guid("7b3b5167-24a4-41e0-8648-48f7f02dd44b"),
                            ApiResourceId = new Guid("5ed18100-4476-4fd4-ac74-4218e939e3fe")
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Client", "authen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d120b22d-85e5-4e6f-80fe-ec49e2138d3c"),
                            ClientId = "eshop-web"
                        },
                        new
                        {
                            Id = new Guid("c49ab291-6e10-49bc-a796-848f22a4936f"),
                            ClientId = "eshop-mobile"
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientGrantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientGrantType", "authen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb3cea84-46d3-428f-b5ea-5c42b366c60f"),
                            ClientId = new Guid("d120b22d-85e5-4e6f-80fe-ec49e2138d3c"),
                            GrantType = "password"
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientScope", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiScopeId")
                        .HasColumnType("uuid");

                    b.HasKey("ClientId", "ApiScopeId");

                    b.HasIndex("ApiScopeId");

                    b.ToTable("ClientScope", "authen");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("d120b22d-85e5-4e6f-80fe-ec49e2138d3c"),
                            ApiScopeId = new Guid("75f824ab-b599-4519-8bcc-37bea9ad7cd9")
                        },
                        new
                        {
                            ClientId = new Guid("c49ab291-6e10-49bc-a796-848f22a4936f"),
                            ApiScopeId = new Guid("7b3b5167-24a4-41e0-8648-48f7f02dd44b")
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientSecret", "authen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20dd1bb6-e722-41ec-84c4-0d66ac95aa6b"),
                            ClientId = new Guid("d120b22d-85e5-4e6f-80fe-ec49e2138d3c"),
                            Secret = "client-web-secret"
                        },
                        new
                        {
                            Id = new Guid("825c7420-15ba-4d07-87d7-54042b0de9c8"),
                            ClientId = new Guid("c49ab291-6e10-49bc-a796-848f22a4936f"),
                            Secret = "client-mobile-secret"
                        });
                });

            modelBuilder.Entity("Authentication.Server.Domains.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "authen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "authen");
                });

            modelBuilder.Entity("Authentication.Server.Domains.ApiScopeResource", b =>
                {
                    b.HasOne("Authentication.Server.Domains.ApiResource", "ApiResource")
                        .WithMany("ApiScopeResources")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Server.Domains.ApiScope", "ApiScope")
                        .WithMany("ApiScopeResources")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");

                    b.Navigation("ApiScope");
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientGrantType", b =>
                {
                    b.HasOne("Authentication.Server.Domains.Client", "Client")
                        .WithMany("ClientGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientScope", b =>
                {
                    b.HasOne("Authentication.Server.Domains.ApiScope", "ApiScope")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ApiScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Server.Domains.Client", "Client")
                        .WithMany("ClientScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiScope");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Authentication.Server.Domains.ClientSecret", b =>
                {
                    b.HasOne("Authentication.Server.Domains.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Authentication.Server.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Authentication.Server.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Server.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Authentication.Server.Domains.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Server.Domains.ApiResource", b =>
                {
                    b.Navigation("ApiScopeResources");
                });

            modelBuilder.Entity("Authentication.Server.Domains.ApiScope", b =>
                {
                    b.Navigation("ApiScopeResources");

                    b.Navigation("ClientScopes");
                });

            modelBuilder.Entity("Authentication.Server.Domains.Client", b =>
                {
                    b.Navigation("ClientGrantTypes");

                    b.Navigation("ClientScopes");

                    b.Navigation("ClientSecrets");
                });
#pragma warning restore 612, 618
        }
    }
}
